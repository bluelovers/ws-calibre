"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const address_1 = require("address");
const os_1 = __importDefault(require("os"));
function searchIPAddress(options = {}) {
    let interfaces = os_1.default.networkInterfaces();
    let { filterInterfacesNot = defaultFilter, defaultIP = '127.0.0.1', filterIP, family = 'IPv4' } = options;
    filterInterfacesNot = _handleInputCallback(filterInterfacesNot, defaultFilter);
    filterIP = _handleInputCallback(filterIP, (ip) => ip && ip !== '127.0.0.1' && ip !== '0.0.0.0');
    let fn = filterInterfacesNot;
    let keys = Object.keys(interfaces)
        .sort((a, b) => {
        let aa = fn(a, interfaces[a]);
        let bb = fn(b, interfaces[b]);
        if (aa != bb) {
            if (bb) {
                return 1;
            }
            else if (aa) {
                return -1;
            }
        }
        return 0;
    });
    let ip;
    let fns = family === 'IPv6' ? [
        address_1.ipv6,
        address_1.ip,
    ] : [
        address_1.ip,
        address_1.ipv6,
    ];
    for (let interfaceName of keys) {
        for (let fn of fns) {
            try {
                ip = fn(interfaceName);
                break;
            }
            catch (e) {
            }
        }
        if (ip && (!filterIP || filterIP(ip))) {
            break;
        }
    }
    if (!ip) {
        ip = defaultIP || '127.0.0.1';
    }
    return ip;
}
exports.searchIPAddress = searchIPAddress;
function defaultFilter(interfaceName, interfaceData) {
    return !/vEthernet/i.test(interfaceName) && interfaceData.some(data => !data.internal);
}
exports.defaultFilter = defaultFilter;
function _handleInputCallback(callback, defaultCallback) {
    let type = typeof callback;
    if (callback == null && (typeof defaultCallback !== 'undefined')) {
        callback = defaultCallback;
    }
    else if (type === 'string') {
        // @ts-ignore
        callback = (s) => s.includes(callback);
    }
    else if (callback instanceof RegExp) {
        // @ts-ignoreq
        callback = (s) => callback.test(s);
    }
    else if (type !== 'function') {
        throw new TypeError(`callback must is string / RegExp / function, but got ${type} ${callback}`);
    }
    return callback;
}
exports._handleInputCallback = _handleInputCallback;
exports.default = searchIPAddress;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHFDQUFnRDtBQUNoRCw0Q0FBOEM7QUFFOUMsU0FBZ0IsZUFBZSxDQUFDLFVBSzVCLEVBQUU7SUFFTCxJQUFJLFVBQVUsR0FBRyxZQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUV4QyxJQUFJLEVBQUUsbUJBQW1CLEdBQUcsYUFBYSxFQUFFLFNBQVMsR0FBRyxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0sR0FBRyxNQUF3QyxFQUFFLEdBQUcsT0FBTyxDQUFDO0lBRTVJLG1CQUFtQixHQUFHLG9CQUFvQixDQUFDLG1CQUFtQixFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQy9FLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssV0FBVyxJQUFJLEVBQUUsS0FBSyxTQUFTLENBQUMsQ0FBQztJQUVoRyxJQUFJLEVBQUUsR0FBRyxtQkFBbUIsQ0FBQztJQUU3QixJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUNoQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFFZCxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFOUIsSUFBSSxFQUFFLElBQUksRUFBRSxFQUNaO1lBQ0MsSUFBSSxFQUFFLEVBQ047Z0JBQ0MsT0FBTyxDQUFDLENBQUE7YUFDUjtpQkFDSSxJQUFJLEVBQUUsRUFDWDtnQkFDQyxPQUFPLENBQUMsQ0FBQyxDQUFBO2FBQ1Q7U0FDRDtRQUVELE9BQU8sQ0FBQyxDQUFBO0lBQ1QsQ0FBQyxDQUFDLENBQ0Y7SUFFRCxJQUFJLEVBQVUsQ0FBQztJQUVmLElBQUksR0FBRyxHQUFHLE1BQU0sS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQzdCLGNBQUk7UUFDSixZQUFTO0tBQ1QsQ0FBQSxDQUFDLENBQUM7UUFDRixZQUFTO1FBQ1QsY0FBSTtLQUNKLENBQUM7SUFFRixLQUFLLElBQUksYUFBYSxJQUFJLElBQUksRUFDOUI7UUFDQyxLQUFLLElBQUksRUFBRSxJQUFJLEdBQUcsRUFDbEI7WUFDQyxJQUNBO2dCQUNDLEVBQUUsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQ3ZCLE1BQU07YUFDTjtZQUNELE9BQU8sQ0FBQyxFQUNSO2FBRUM7U0FDRDtRQUVELElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQ3JDO1lBQ0MsTUFBTTtTQUNOO0tBQ0Q7SUFFRCxJQUFJLENBQUMsRUFBRSxFQUNQO1FBQ0MsRUFBRSxHQUFHLFNBQVMsSUFBSSxXQUFXLENBQUM7S0FDOUI7SUFFRCxPQUFPLEVBQUUsQ0FBQztBQUNYLENBQUM7QUEzRUQsMENBMkVDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLGFBQXFCLEVBQUUsYUFBcUM7SUFFekYsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQ3ZGLENBQUM7QUFIRCxzQ0FHQztBQUVELFNBQWdCLG9CQUFvQixDQUFpRCxRQUE2QixFQUFFLGVBQWtCO0lBRXJJLElBQUksSUFBSSxHQUFHLE9BQU8sUUFBUSxDQUFDO0lBRTNCLElBQUksUUFBUSxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sZUFBZSxLQUFLLFdBQVcsQ0FBQyxFQUNoRTtRQUNDLFFBQVEsR0FBRyxlQUFlLENBQUM7S0FDM0I7U0FDSSxJQUFJLElBQUksS0FBSyxRQUFRLEVBQzFCO1FBQ0MsYUFBYTtRQUNiLFFBQVEsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFrQixDQUFDLENBQUM7S0FDakQ7U0FDSSxJQUFJLFFBQVEsWUFBWSxNQUFNLEVBQ25DO1FBQ0MsY0FBYztRQUNkLFFBQVEsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUUsUUFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDOUM7U0FDSSxJQUFJLElBQUksS0FBSyxVQUFVLEVBQzVCO1FBQ0MsTUFBTSxJQUFJLFNBQVMsQ0FBQyx3REFBd0QsSUFBSSxJQUFJLFFBQVEsRUFBRSxDQUFDLENBQUE7S0FDL0Y7SUFFRCxPQUFPLFFBQWEsQ0FBQztBQUN0QixDQUFDO0FBeEJELG9EQXdCQztBQUVELGtCQUFlLGVBQWUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlwIGFzIElQQWRkcmVzcywgaXB2NiB9IGZyb20gJ2FkZHJlc3MnO1xuaW1wb3J0IG9zLCB7IE5ldHdvcmtJbnRlcmZhY2VJbmZvIH0gZnJvbSBcIm9zXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWFyY2hJUEFkZHJlc3Mob3B0aW9uczoge1xuXHRmaWx0ZXJJbnRlcmZhY2VzTm90Pzogc3RyaW5nIHwgUmVnRXhwIHwgKChpbnRlcmZhY2VOYW1lOiBzdHJpbmcsIGludGVyZmFjZURhdGE6IE5ldHdvcmtJbnRlcmZhY2VJbmZvW10pID0+IGJvb2xlYW4pO1xuXHRmaWx0ZXJJUD86IHN0cmluZyB8IFJlZ0V4cCB8ICgoaXA6IHN0cmluZykgPT4gYm9vbGVhbik7XG5cdGRlZmF1bHRJUD86IHN0cmluZyxcblx0ZmFtaWx5PzogTmV0d29ya0ludGVyZmFjZUluZm9bXCJmYW1pbHlcIl1cbn0gPSB7fSlcbntcblx0bGV0IGludGVyZmFjZXMgPSBvcy5uZXR3b3JrSW50ZXJmYWNlcygpO1xuXG5cdGxldCB7IGZpbHRlckludGVyZmFjZXNOb3QgPSBkZWZhdWx0RmlsdGVyLCBkZWZhdWx0SVAgPSAnMTI3LjAuMC4xJywgZmlsdGVySVAsIGZhbWlseSA9ICdJUHY0JyBhcyBOZXR3b3JrSW50ZXJmYWNlSW5mb1tcImZhbWlseVwiXSB9ID0gb3B0aW9ucztcblxuXHRmaWx0ZXJJbnRlcmZhY2VzTm90ID0gX2hhbmRsZUlucHV0Q2FsbGJhY2soZmlsdGVySW50ZXJmYWNlc05vdCwgZGVmYXVsdEZpbHRlcik7XG5cdGZpbHRlcklQID0gX2hhbmRsZUlucHV0Q2FsbGJhY2soZmlsdGVySVAsIChpcCkgPT4gaXAgJiYgaXAgIT09ICcxMjcuMC4wLjEnICYmIGlwICE9PSAnMC4wLjAuMCcpO1xuXG5cdGxldCBmbiA9IGZpbHRlckludGVyZmFjZXNOb3Q7XG5cblx0bGV0IGtleXMgPSBPYmplY3Qua2V5cyhpbnRlcmZhY2VzKVxuXHRcdC5zb3J0KChhLCBiKSA9PlxuXHRcdHtcblx0XHRcdGxldCBhYSA9IGZuKGEsIGludGVyZmFjZXNbYV0pO1xuXHRcdFx0bGV0IGJiID0gZm4oYiwgaW50ZXJmYWNlc1tiXSk7XG5cblx0XHRcdGlmIChhYSAhPSBiYilcblx0XHRcdHtcblx0XHRcdFx0aWYgKGJiKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cmV0dXJuIDFcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIGlmIChhYSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHJldHVybiAtMVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwXG5cdFx0fSlcblx0O1xuXG5cdGxldCBpcDogc3RyaW5nO1xuXG5cdGxldCBmbnMgPSBmYW1pbHkgPT09ICdJUHY2JyA/IFtcblx0XHRpcHY2LFxuXHRcdElQQWRkcmVzcyxcblx0XTogW1xuXHRcdElQQWRkcmVzcyxcblx0XHRpcHY2LFxuXHRdO1xuXG5cdGZvciAobGV0IGludGVyZmFjZU5hbWUgb2Yga2V5cylcblx0e1xuXHRcdGZvciAobGV0IGZuIG9mIGZucylcblx0XHR7XG5cdFx0XHR0cnlcblx0XHRcdHtcblx0XHRcdFx0aXAgPSBmbihpbnRlcmZhY2VOYW1lKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRjYXRjaCAoZSlcblx0XHRcdHtcblxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChpcCAmJiAoIWZpbHRlcklQIHx8IGZpbHRlcklQKGlwKSkpXG5cdFx0e1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCFpcClcblx0e1xuXHRcdGlwID0gZGVmYXVsdElQIHx8ICcxMjcuMC4wLjEnO1xuXHR9XG5cblx0cmV0dXJuIGlwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdEZpbHRlcihpbnRlcmZhY2VOYW1lOiBzdHJpbmcsIGludGVyZmFjZURhdGE6IE5ldHdvcmtJbnRlcmZhY2VJbmZvW10pXG57XG5cdHJldHVybiAhL3ZFdGhlcm5ldC9pLnRlc3QoaW50ZXJmYWNlTmFtZSkgJiYgaW50ZXJmYWNlRGF0YS5zb21lKGRhdGEgPT4gIWRhdGEuaW50ZXJuYWwpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfaGFuZGxlSW5wdXRDYWxsYmFjazxUIGV4dGVuZHMgKHM6IHN0cmluZywgLi4uYXJndjogYW55KSA9PiBib29sZWFuPihjYWxsYmFjazogc3RyaW5nIHwgUmVnRXhwIHwgVCwgZGVmYXVsdENhbGxiYWNrOiBUKTogVFxue1xuXHRsZXQgdHlwZSA9IHR5cGVvZiBjYWxsYmFjaztcblxuXHRpZiAoY2FsbGJhY2sgPT0gbnVsbCAmJiAodHlwZW9mIGRlZmF1bHRDYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcpKVxuXHR7XG5cdFx0Y2FsbGJhY2sgPSBkZWZhdWx0Q2FsbGJhY2s7XG5cdH1cblx0ZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpXG5cdHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0Y2FsbGJhY2sgPSAocykgPT4gcy5pbmNsdWRlcyhjYWxsYmFjayBhcyBzdHJpbmcpO1xuXHR9XG5cdGVsc2UgaWYgKGNhbGxiYWNrIGluc3RhbmNlb2YgUmVnRXhwKVxuXHR7XG5cdFx0Ly8gQHRzLWlnbm9yZXFcblx0XHRjYWxsYmFjayA9IChzKSA9PiAoY2FsbGJhY2sgYXMgUmVnRXhwKS50ZXN0KHMpXG5cdH1cblx0ZWxzZSBpZiAodHlwZSAhPT0gJ2Z1bmN0aW9uJylcblx0e1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYGNhbGxiYWNrIG11c3QgaXMgc3RyaW5nIC8gUmVnRXhwIC8gZnVuY3Rpb24sIGJ1dCBnb3QgJHt0eXBlfSAke2NhbGxiYWNrfWApXG5cdH1cblxuXHRyZXR1cm4gY2FsbGJhY2sgYXMgVDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2VhcmNoSVBBZGRyZXNzXG4iXX0=